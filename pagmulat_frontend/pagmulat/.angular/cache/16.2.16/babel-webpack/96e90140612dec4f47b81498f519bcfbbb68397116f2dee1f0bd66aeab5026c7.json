{"ast":null,"code":"import { __decorate } from \"tslib\";\nexport let SurveyFormComponent = class SurveyFormComponent {\n  constructor(fb, apiService) {\n    this.fb = fb;\n    this.apiService = apiService;\n    this.close = new EventEmitter();\n    this.isSubmitting = false;\n    this.predictionResult = null;\n    this.error = null;\n    this.surveyForm = this.fb.group({\n      year_level: ['', Validators.required],\n      program: ['', Validators.required],\n      age: ['', [Validators.required, Validators.min(15), Validators.max(99)]],\n      gender: ['', Validators.required],\n      lms_usage: ['', Validators.required],\n      code_platform_usage: ['', Validators.required],\n      ai_usage: ['', Validators.required],\n      social_media_usage: ['', Validators.required],\n      fixed_study_schedule: ['', Validators.required],\n      study_hours: ['', Validators.required],\n      study_start_time: ['', Validators.required],\n      assignment_timeliness: ['', Validators.required],\n      collab_tools_usage: ['', Validators.required],\n      sleep_time: ['', Validators.required],\n      burnout: ['', Validators.required],\n      study_breaks: ['', Validators.required],\n      motivation: ['', Validators.required],\n      motivation_triggers: this.fb.array([]),\n      productivity: ['', Validators.required],\n      productivity_tools: this.fb.array([]),\n      social_media_distraction: ['', Validators.required],\n      distraction_platform: ['', Validators.required],\n      block_distractions: ['', Validators.required],\n      academic_tools: this.fb.array([]),\n      digital_reliance: ['', Validators.required],\n      // Optional fields\n      digital_habits: [''],\n      digital_change: [''],\n      digital_reflection: ['']\n    });\n  }\n  get motivation_triggers() {\n    return this.surveyForm.get('motivation_triggers');\n  }\n  get productivity_tools() {\n    return this.surveyForm.get('productivity_tools');\n  }\n  get academic_tools() {\n    return this.surveyForm.get('academic_tools');\n  }\n  onCheckboxChange(event, formArrayName) {\n    const formArray = this.surveyForm.get(formArrayName);\n    if (event.target.checked) {\n      formArray.push(this.fb.control(event.target.value));\n    } else {\n      const idx = formArray.controls.findIndex(x => x.value === event.target.value);\n      if (idx !== -1) formArray.removeAt(idx);\n    }\n  }\n  submitSurvey() {\n    this.isSubmitting = true;\n    this.error = null;\n    this.predictionResult = null;\n    this.apiService.predictProductivity(this.surveyForm.value).subscribe({\n      next: result => {\n        this.predictionResult = result;\n        this.isSubmitting = false;\n      },\n      error: err => {\n        this.error = 'Prediction failed.';\n        this.isSubmitting = false;\n      }\n    });\n  }\n  onClose() {\n    this.close.emit();\n  }\n};\n__decorate([Output()], SurveyFormComponent.prototype, \"close\", void 0);\nSurveyFormComponent = __decorate([Component({\n  selector: 'app-survey-form',\n  templateUrl: './survey-form.component.html',\n  styleUrls: ['./survey-form.component.css']\n})], SurveyFormComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}